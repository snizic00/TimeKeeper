// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeKeeper.Persistence;

#nullable disable

namespace TimeKeeper.Persistence.Migrations
{
    [DbContext(typeof(TimeKeeperDbContext))]
    partial class TimeKeeperDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TimeKeeper.Domain.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("TimeKeeper.Domain.Models.Bicycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BicycleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Bicycles");
                });

            modelBuilder.Entity("TimeKeeper.Domain.Models.Competitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BicycleId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StartNo")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BicycleId");

                    b.HasIndex("TeamId");

                    b.ToTable("Competitors");

                    b.HasDiscriminator<string>("Category").HasValue("Competitor");
                });

            modelBuilder.Entity("TimeKeeper.Domain.Models.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("TimeKeeper.Domain.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompetitorId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StageTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorId");

                    b.HasIndex("StageId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("TimeKeeper.Domain.Models.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("TimeKeeper.Domain.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TimeKeeper.Domain.Models.Female", b =>
                {
                    b.HasBaseType("TimeKeeper.Domain.Models.Competitor");

                    b.HasDiscriminator().HasValue("Female");
                });

            modelBuilder.Entity("TimeKeeper.Domain.Models.Male", b =>
                {
                    b.HasBaseType("TimeKeeper.Domain.Models.Competitor");

                    b.HasDiscriminator().HasValue("Male");
                });

            modelBuilder.Entity("TimeKeeper.Domain.Models.Competitor", b =>
                {
                    b.HasOne("TimeKeeper.Domain.Models.Bicycle", "Bicycle")
                        .WithMany("BicycleOwners")
                        .HasForeignKey("BicycleId");

                    b.HasOne("TimeKeeper.Domain.Models.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId");

                    b.Navigation("Bicycle");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TimeKeeper.Domain.Models.Result", b =>
                {
                    b.HasOne("TimeKeeper.Domain.Models.Competitor", "Competitor")
                        .WithMany("MyResults")
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeKeeper.Domain.Models.Stage", "Stage")
                        .WithMany("StageResults")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competitor");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("TimeKeeper.Domain.Models.Stage", b =>
                {
                    b.HasOne("TimeKeeper.Domain.Models.Race", "Race")
                        .WithMany("Stages")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("TimeKeeper.Domain.Models.Bicycle", b =>
                {
                    b.Navigation("BicycleOwners");
                });

            modelBuilder.Entity("TimeKeeper.Domain.Models.Competitor", b =>
                {
                    b.Navigation("MyResults");
                });

            modelBuilder.Entity("TimeKeeper.Domain.Models.Race", b =>
                {
                    b.Navigation("Stages");
                });

            modelBuilder.Entity("TimeKeeper.Domain.Models.Stage", b =>
                {
                    b.Navigation("StageResults");
                });

            modelBuilder.Entity("TimeKeeper.Domain.Models.Team", b =>
                {
                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
